/*
* generated by Xtext
*/
grammar InternalRestfuncDSL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.unice.spinefm.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.unice.spinefm.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.unice.spinefm.services.RestfuncDSLGrammarAccess;

}

@parser::members {
 
 	private RestfuncDSLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(RestfuncDSLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleRestFunc
entryRuleRestFunc 
:
{ before(grammarAccess.getRestFuncRule()); }
	 ruleRestFunc
{ after(grammarAccess.getRestFuncRule()); } 
	 EOF 
;

// Rule RestFunc
ruleRestFunc
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRestFuncAccess().getGroup()); }
(rule__RestFunc__Group__0)
{ after(grammarAccess.getRestFuncAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRuleString
entryRuleRuleString 
:
{ before(grammarAccess.getRuleStringRule()); }
	 ruleRuleString
{ after(grammarAccess.getRuleStringRule()); } 
	 EOF 
;

// Rule RuleString
ruleRuleString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleStringAccess().getGroup()); }
(rule__RuleString__Group__0)
{ after(grammarAccess.getRuleStringAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSourceAndTarget
entryRuleSourceAndTarget 
:
{ before(grammarAccess.getSourceAndTargetRule()); }
	 ruleSourceAndTarget
{ after(grammarAccess.getSourceAndTargetRule()); } 
	 EOF 
;

// Rule SourceAndTarget
ruleSourceAndTarget
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSourceAndTargetAccess().getGroup()); }
(rule__SourceAndTarget__Group__0)
{ after(grammarAccess.getSourceAndTargetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSource
entryRuleSource 
:
{ before(grammarAccess.getSourceRule()); }
	 ruleSource
{ after(grammarAccess.getSourceRule()); } 
	 EOF 
;

// Rule Source
ruleSource
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSourceAccess().getGroup()); }
(rule__Source__Group__0)
{ after(grammarAccess.getSourceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTarget
entryRuleTarget 
:
{ before(grammarAccess.getTargetRule()); }
	 ruleTarget
{ after(grammarAccess.getTargetRule()); } 
	 EOF 
;

// Rule Target
ruleTarget
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTargetAccess().getGroup()); }
(rule__Target__Group__0)
{ after(grammarAccess.getTargetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLeftPart
entryRuleLeftPart 
:
{ before(grammarAccess.getLeftPartRule()); }
	 ruleLeftPart
{ after(grammarAccess.getLeftPartRule()); } 
	 EOF 
;

// Rule LeftPart
ruleLeftPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getLeftPartAccess().getFeaturesAssignment()); }
(rule__LeftPart__FeaturesAssignment)
{ after(grammarAccess.getLeftPartAccess().getFeaturesAssignment()); }
)
(
{ before(grammarAccess.getLeftPartAccess().getFeaturesAssignment()); }
(rule__LeftPart__FeaturesAssignment)*
{ after(grammarAccess.getLeftPartAccess().getFeaturesAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroupFeature
entryRuleGroupFeature 
:
{ before(grammarAccess.getGroupFeatureRule()); }
	 ruleGroupFeature
{ after(grammarAccess.getGroupFeatureRule()); } 
	 EOF 
;

// Rule GroupFeature
ruleGroupFeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGroupFeatureAccess().getGroup()); }
(rule__GroupFeature__Group__0)
{ after(grammarAccess.getGroupFeatureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeatureNamed
entryRuleFeatureNamed 
:
{ before(grammarAccess.getFeatureNamedRule()); }
	 ruleFeatureNamed
{ after(grammarAccess.getFeatureNamedRule()); } 
	 EOF 
;

// Rule FeatureNamed
ruleFeatureNamed
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureNamedAccess().getAlternatives()); }
(rule__FeatureNamed__Alternatives)
{ after(grammarAccess.getFeatureNamedAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingleFeature
entryRuleSingleFeature 
:
{ before(grammarAccess.getSingleFeatureRule()); }
	 ruleSingleFeature
{ after(grammarAccess.getSingleFeatureRule()); } 
	 EOF 
;

// Rule SingleFeature
ruleSingleFeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleFeatureAccess().getFeatureNameAssignment()); }
(rule__SingleFeature__FeatureNameAssignment)
{ after(grammarAccess.getSingleFeatureAccess().getFeatureNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableFeature
entryRuleVariableFeature 
:
{ before(grammarAccess.getVariableFeatureRule()); }
	 ruleVariableFeature
{ after(grammarAccess.getVariableFeatureRule()); } 
	 EOF 
;

// Rule VariableFeature
ruleVariableFeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableFeatureAccess().getGroup()); }
(rule__VariableFeature__Group__0)
{ after(grammarAccess.getVariableFeatureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getGroup()); }
(rule__Variable__Group__0)
{ after(grammarAccess.getVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStarFeature
entryRuleStarFeature 
:
{ before(grammarAccess.getStarFeatureRule()); }
	 ruleStarFeature
{ after(grammarAccess.getStarFeatureRule()); } 
	 EOF 
;

// Rule StarFeature
ruleStarFeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStarFeatureAccess().getGroup()); }
(rule__StarFeature__Group__0)
{ after(grammarAccess.getStarFeatureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRightPart
entryRuleRightPart 
:
{ before(grammarAccess.getRightPartRule()); }
	 ruleRightPart
{ after(grammarAccess.getRightPartRule()); } 
	 EOF 
;

// Rule RightPart
ruleRightPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRightPartAccess().getGroup()); }
(rule__RightPart__Group__0)
{ after(grammarAccess.getRightPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFM_STATE
entryRuleFM_STATE 
:
{ before(grammarAccess.getFM_STATERule()); }
	 ruleFM_STATE
{ after(grammarAccess.getFM_STATERule()); } 
	 EOF 
;

// Rule FM_STATE
ruleFM_STATE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFM_STATEAccess().getAlternatives()); }
(rule__FM_STATE__Alternatives)
{ after(grammarAccess.getFM_STATEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleACTIONFEATURE
entryRuleACTIONFEATURE 
:
{ before(grammarAccess.getACTIONFEATURERule()); }
	 ruleACTIONFEATURE
{ after(grammarAccess.getACTIONFEATURERule()); } 
	 EOF 
;

// Rule ACTIONFEATURE
ruleACTIONFEATURE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getACTIONFEATUREAccess().getAlternatives()); }
(rule__ACTIONFEATURE__Alternatives)
{ after(grammarAccess.getACTIONFEATUREAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__FeatureNamed__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureNamedAccess().getSingleFeatureParserRuleCall_0()); }
	ruleSingleFeature
{ after(grammarAccess.getFeatureNamedAccess().getSingleFeatureParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFeatureNamedAccess().getVariableFeatureParserRuleCall_1()); }
	ruleVariableFeature
{ after(grammarAccess.getFeatureNamedAccess().getVariableFeatureParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getFeatureNamedAccess().getStarFeatureParserRuleCall_2()); }
	ruleStarFeature
{ after(grammarAccess.getFeatureNamedAccess().getStarFeatureParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FM_STATE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFM_STATEAccess().getSELECTEDKeyword_0()); }

	'SELECTED' 

{ after(grammarAccess.getFM_STATEAccess().getSELECTEDKeyword_0()); }
)

    |(
{ before(grammarAccess.getFM_STATEAccess().getDESELECTEDKeyword_1()); }

	'DESELECTED' 

{ after(grammarAccess.getFM_STATEAccess().getDESELECTEDKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ACTIONFEATURE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getACTIONFEATUREAccess().getSELECTKeyword_0()); }

	'SELECT' 

{ after(grammarAccess.getACTIONFEATUREAccess().getSELECTKeyword_0()); }
)

    |(
{ before(grammarAccess.getACTIONFEATUREAccess().getDESELECTKeyword_1()); }

	'DESELECT' 

{ after(grammarAccess.getACTIONFEATUREAccess().getDESELECTKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__RestFunc__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestFunc__Group__0__Impl
	rule__RestFunc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RestFunc__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestFuncAccess().getInitAssignment_0()); }
(rule__RestFunc__InitAssignment_0)
{ after(grammarAccess.getRestFuncAccess().getInitAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestFunc__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestFunc__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RestFunc__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getRestFuncAccess().getRulesAssignment_1()); }
(rule__RestFunc__RulesAssignment_1)
{ after(grammarAccess.getRestFuncAccess().getRulesAssignment_1()); }
)
(
{ before(grammarAccess.getRestFuncAccess().getRulesAssignment_1()); }
(rule__RestFunc__RulesAssignment_1)*
{ after(grammarAccess.getRestFuncAccess().getRulesAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RuleString__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleString__Group__0__Impl
	rule__RuleString__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleString__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleStringAccess().getBEGIN_RULETerminalRuleCall_0()); }
	RULE_BEGIN_RULE
{ after(grammarAccess.getRuleStringAccess().getBEGIN_RULETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleString__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleString__Group__1__Impl
	rule__RuleString__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleString__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleStringAccess().getIdAssignment_1()); }
(rule__RuleString__IdAssignment_1)?
{ after(grammarAccess.getRuleStringAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleString__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleString__Group__2__Impl
	rule__RuleString__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleString__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleStringAccess().getPOINTSTerminalRuleCall_2()); }
	RULE_POINTS
{ after(grammarAccess.getRuleStringAccess().getPOINTSTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleString__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleString__Group__3__Impl
	rule__RuleString__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleString__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleStringAccess().getLeftAssignment_3()); }
(rule__RuleString__LeftAssignment_3)
{ after(grammarAccess.getRuleStringAccess().getLeftAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleString__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleString__Group__4__Impl
	rule__RuleString__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleString__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleStringAccess().getIMPLYTerminalRuleCall_4()); }
	RULE_IMPLY
{ after(grammarAccess.getRuleStringAccess().getIMPLYTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleString__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleString__Group__5__Impl
	rule__RuleString__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleString__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleStringAccess().getRightAssignment_5()); }
(rule__RuleString__RightAssignment_5)
{ after(grammarAccess.getRuleStringAccess().getRightAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleString__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleString__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleString__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleStringAccess().getEND_RULETerminalRuleCall_6()); }
	RULE_END_RULE
{ after(grammarAccess.getRuleStringAccess().getEND_RULETerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__SourceAndTarget__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceAndTarget__Group__0__Impl
	rule__SourceAndTarget__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceAndTarget__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAndTargetAccess().getSourceAssignment_0()); }
(rule__SourceAndTarget__SourceAssignment_0)
{ after(grammarAccess.getSourceAndTargetAccess().getSourceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceAndTarget__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceAndTarget__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceAndTarget__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAndTargetAccess().getTargetAssignment_1()); }
(rule__SourceAndTarget__TargetAssignment_1)
{ after(grammarAccess.getSourceAndTargetAccess().getTargetAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Source__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Source__Group__0__Impl
	rule__Source__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Source__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAccess().getSOURCEKEYTerminalRuleCall_0()); }
	RULE_SOURCEKEY
{ after(grammarAccess.getSourceAccess().getSOURCEKEYTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Source__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Source__Group__1__Impl
	rule__Source__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Source__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAccess().getEQUALTerminalRuleCall_1()); }
	RULE_EQUAL
{ after(grammarAccess.getSourceAccess().getEQUALTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Source__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Source__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Source__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAccess().getDeSrcAssignment_2()); }
(rule__Source__DeSrcAssignment_2)
{ after(grammarAccess.getSourceAccess().getDeSrcAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Target__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Target__Group__0__Impl
	rule__Target__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getTARGETKEYTerminalRuleCall_0()); }
	RULE_TARGETKEY
{ after(grammarAccess.getTargetAccess().getTARGETKEYTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Target__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Target__Group__1__Impl
	rule__Target__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getEQUALTerminalRuleCall_1()); }
	RULE_EQUAL
{ after(grammarAccess.getTargetAccess().getEQUALTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Target__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Target__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getDeTargetAssignment_2()); }
(rule__Target__DeTargetAssignment_2)
{ after(grammarAccess.getTargetAccess().getDeTargetAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GroupFeature__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupFeature__Group__0__Impl
	rule__GroupFeature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupFeature__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupFeatureAccess().getStateAssignment_0()); }
(rule__GroupFeature__StateAssignment_0)
{ after(grammarAccess.getGroupFeatureAccess().getStateAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupFeature__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupFeature__Group__1__Impl
	rule__GroupFeature__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupFeature__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupFeatureAccess().getFeatureAssignment_1()); }
(rule__GroupFeature__FeatureAssignment_1)
{ after(grammarAccess.getGroupFeatureAccess().getFeatureAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupFeature__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupFeature__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupFeature__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupFeatureAccess().getGroup_2()); }
(rule__GroupFeature__Group_2__0)*
{ after(grammarAccess.getGroupFeatureAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GroupFeature__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupFeature__Group_2__0__Impl
	rule__GroupFeature__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupFeature__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupFeatureAccess().getCOMMATerminalRuleCall_2_0()); }
	RULE_COMMA
{ after(grammarAccess.getGroupFeatureAccess().getCOMMATerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupFeature__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupFeature__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupFeature__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupFeatureAccess().getFeatureAssignment_2_1()); }
(rule__GroupFeature__FeatureAssignment_2_1)
{ after(grammarAccess.getGroupFeatureAccess().getFeatureAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableFeature__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableFeature__Group__0__Impl
	rule__VariableFeature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableFeature__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableFeatureAccess().getFeatureNameAssignment_0()); }
(rule__VariableFeature__FeatureNameAssignment_0)
{ after(grammarAccess.getVariableFeatureAccess().getFeatureNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableFeature__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableFeature__Group__1__Impl
	rule__VariableFeature__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableFeature__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableFeatureAccess().getDOTTerminalRuleCall_1()); }
	RULE_DOT
{ after(grammarAccess.getVariableFeatureAccess().getDOTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableFeature__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableFeature__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableFeature__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableFeatureAccess().getVariableAssignment_2()); }
(rule__VariableFeature__VariableAssignment_2)
{ after(grammarAccess.getVariableFeatureAccess().getVariableAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Variable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getVARBEGINTerminalRuleCall_0()); }
	RULE_VARBEGIN
{ after(grammarAccess.getVariableAccess().getVARBEGINTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getIdAssignment_1()); }
(rule__Variable__IdAssignment_1)
{ after(grammarAccess.getVariableAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StarFeature__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StarFeature__Group__0__Impl
	rule__StarFeature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StarFeature__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStarFeatureAccess().getFeatureNameAssignment_0()); }
(rule__StarFeature__FeatureNameAssignment_0)
{ after(grammarAccess.getStarFeatureAccess().getFeatureNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StarFeature__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StarFeature__Group__1__Impl
	rule__StarFeature__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StarFeature__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStarFeatureAccess().getDOTTerminalRuleCall_1()); }
	RULE_DOT
{ after(grammarAccess.getStarFeatureAccess().getDOTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StarFeature__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StarFeature__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StarFeature__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStarFeatureAccess().getSTARTerminalRuleCall_2()); }
	RULE_STAR
{ after(grammarAccess.getStarFeatureAccess().getSTARTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RightPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RightPart__Group__0__Impl
	rule__RightPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RightPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRightPartAccess().getActionAssignment_0()); }
(rule__RightPart__ActionAssignment_0)
{ after(grammarAccess.getRightPartAccess().getActionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RightPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RightPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RightPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRightPartAccess().getFeatureAssignment_1()); }
(rule__RightPart__FeatureAssignment_1)
{ after(grammarAccess.getRightPartAccess().getFeatureAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__RestFunc__InitAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestFuncAccess().getInitSourceAndTargetParserRuleCall_0_0()); }
	ruleSourceAndTarget{ after(grammarAccess.getRestFuncAccess().getInitSourceAndTargetParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RestFunc__RulesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestFuncAccess().getRulesRuleStringParserRuleCall_1_0()); }
	ruleRuleString{ after(grammarAccess.getRestFuncAccess().getRulesRuleStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleString__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleStringAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getRuleStringAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleString__LeftAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleStringAccess().getLeftLeftPartParserRuleCall_3_0()); }
	ruleLeftPart{ after(grammarAccess.getRuleStringAccess().getLeftLeftPartParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleString__RightAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleStringAccess().getRightRightPartParserRuleCall_5_0()); }
	ruleRightPart{ after(grammarAccess.getRuleStringAccess().getRightRightPartParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceAndTarget__SourceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAndTargetAccess().getSourceSourceParserRuleCall_0_0()); }
	ruleSource{ after(grammarAccess.getSourceAndTargetAccess().getSourceSourceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceAndTarget__TargetAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAndTargetAccess().getTargetTargetParserRuleCall_1_0()); }
	ruleTarget{ after(grammarAccess.getSourceAndTargetAccess().getTargetTargetParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Source__DeSrcAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAccess().getDeSrcIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getSourceAccess().getDeSrcIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Target__DeTargetAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getDeTargetIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getTargetAccess().getDeTargetIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LeftPart__FeaturesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeftPartAccess().getFeaturesGroupFeatureParserRuleCall_0()); }
	ruleGroupFeature{ after(grammarAccess.getLeftPartAccess().getFeaturesGroupFeatureParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupFeature__StateAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupFeatureAccess().getStateFM_STATEParserRuleCall_0_0()); }
	ruleFM_STATE{ after(grammarAccess.getGroupFeatureAccess().getStateFM_STATEParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupFeature__FeatureAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupFeatureAccess().getFeatureFeatureNamedParserRuleCall_1_0()); }
	ruleFeatureNamed{ after(grammarAccess.getGroupFeatureAccess().getFeatureFeatureNamedParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupFeature__FeatureAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupFeatureAccess().getFeatureFeatureNamedParserRuleCall_2_1_0()); }
	ruleFeatureNamed{ after(grammarAccess.getGroupFeatureAccess().getFeatureFeatureNamedParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleFeature__FeatureNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleFeatureAccess().getFeatureNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getSingleFeatureAccess().getFeatureNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableFeature__FeatureNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableFeatureAccess().getFeatureNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getVariableFeatureAccess().getFeatureNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableFeature__VariableAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableFeatureAccess().getVariableVariableParserRuleCall_2_0()); }
	ruleVariable{ after(grammarAccess.getVariableFeatureAccess().getVariableVariableParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StarFeature__FeatureNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStarFeatureAccess().getFeatureNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getStarFeatureAccess().getFeatureNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RightPart__ActionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRightPartAccess().getActionACTIONFEATUREParserRuleCall_0_0()); }
	ruleACTIONFEATURE{ after(grammarAccess.getRightPartAccess().getActionACTIONFEATUREParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RightPart__FeatureAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRightPartAccess().getFeatureFeatureNamedParserRuleCall_1_0()); }
	ruleFeatureNamed{ after(grammarAccess.getRightPartAccess().getFeatureFeatureNamedParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_IMPLY : '=>';

RULE_BEGIN_RULE : 'rule';

RULE_STAR : '*';

RULE_POINTS : ':';

RULE_END_RULE : ';';

RULE_COMMA : ',';

RULE_DOT : '.';

RULE_VARBEGIN : '$';

RULE_SOURCEKEY : 'source';

RULE_TARGETKEY : 'target';

RULE_EQUAL : '=';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


