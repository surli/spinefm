/*
* generated by Xtext
*/
package fr.unice.spinefm.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.unice.spinefm.services.RestfuncDSLGrammarAccess;

public class RestfuncDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private RestfuncDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.unice.spinefm.ui.contentassist.antlr.internal.InternalRestfuncDSLParser createParser() {
		fr.unice.spinefm.ui.contentassist.antlr.internal.InternalRestfuncDSLParser result = new fr.unice.spinefm.ui.contentassist.antlr.internal.InternalRestfuncDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFeatureNamedAccess().getAlternatives(), "rule__FeatureNamed__Alternatives");
					put(grammarAccess.getFM_STATEAccess().getAlternatives(), "rule__FM_STATE__Alternatives");
					put(grammarAccess.getACTIONFEATUREAccess().getAlternatives(), "rule__ACTIONFEATURE__Alternatives");
					put(grammarAccess.getRestFuncAccess().getGroup(), "rule__RestFunc__Group__0");
					put(grammarAccess.getRuleStringAccess().getGroup(), "rule__RuleString__Group__0");
					put(grammarAccess.getSourceAndTargetAccess().getGroup(), "rule__SourceAndTarget__Group__0");
					put(grammarAccess.getSourceAccess().getGroup(), "rule__Source__Group__0");
					put(grammarAccess.getTargetAccess().getGroup(), "rule__Target__Group__0");
					put(grammarAccess.getGroupFeatureAccess().getGroup(), "rule__GroupFeature__Group__0");
					put(grammarAccess.getGroupFeatureAccess().getGroup_2(), "rule__GroupFeature__Group_2__0");
					put(grammarAccess.getVariableFeatureAccess().getGroup(), "rule__VariableFeature__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getStarFeatureAccess().getGroup(), "rule__StarFeature__Group__0");
					put(grammarAccess.getRightPartAccess().getGroup(), "rule__RightPart__Group__0");
					put(grammarAccess.getRestFuncAccess().getInitAssignment_0(), "rule__RestFunc__InitAssignment_0");
					put(grammarAccess.getRestFuncAccess().getRulesAssignment_1(), "rule__RestFunc__RulesAssignment_1");
					put(grammarAccess.getRuleStringAccess().getIdAssignment_1(), "rule__RuleString__IdAssignment_1");
					put(grammarAccess.getRuleStringAccess().getLeftAssignment_3(), "rule__RuleString__LeftAssignment_3");
					put(grammarAccess.getRuleStringAccess().getRightAssignment_5(), "rule__RuleString__RightAssignment_5");
					put(grammarAccess.getSourceAndTargetAccess().getSourceAssignment_0(), "rule__SourceAndTarget__SourceAssignment_0");
					put(grammarAccess.getSourceAndTargetAccess().getTargetAssignment_1(), "rule__SourceAndTarget__TargetAssignment_1");
					put(grammarAccess.getSourceAccess().getDeSrcAssignment_2(), "rule__Source__DeSrcAssignment_2");
					put(grammarAccess.getTargetAccess().getDeTargetAssignment_2(), "rule__Target__DeTargetAssignment_2");
					put(grammarAccess.getLeftPartAccess().getFeaturesAssignment(), "rule__LeftPart__FeaturesAssignment");
					put(grammarAccess.getGroupFeatureAccess().getStateAssignment_0(), "rule__GroupFeature__StateAssignment_0");
					put(grammarAccess.getGroupFeatureAccess().getFeatureAssignment_1(), "rule__GroupFeature__FeatureAssignment_1");
					put(grammarAccess.getGroupFeatureAccess().getFeatureAssignment_2_1(), "rule__GroupFeature__FeatureAssignment_2_1");
					put(grammarAccess.getSingleFeatureAccess().getFeatureNameAssignment(), "rule__SingleFeature__FeatureNameAssignment");
					put(grammarAccess.getVariableFeatureAccess().getFeatureNameAssignment_0(), "rule__VariableFeature__FeatureNameAssignment_0");
					put(grammarAccess.getVariableFeatureAccess().getVariableAssignment_2(), "rule__VariableFeature__VariableAssignment_2");
					put(grammarAccess.getVariableAccess().getIdAssignment_1(), "rule__Variable__IdAssignment_1");
					put(grammarAccess.getStarFeatureAccess().getFeatureNameAssignment_0(), "rule__StarFeature__FeatureNameAssignment_0");
					put(grammarAccess.getRightPartAccess().getActionAssignment_0(), "rule__RightPart__ActionAssignment_0");
					put(grammarAccess.getRightPartAccess().getFeatureAssignment_1(), "rule__RightPart__FeatureAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.unice.spinefm.ui.contentassist.antlr.internal.InternalRestfuncDSLParser typedParser = (fr.unice.spinefm.ui.contentassist.antlr.internal.InternalRestfuncDSLParser) parser;
			typedParser.entryRuleRestFunc();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RestfuncDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RestfuncDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
