package fr.unice.spinefm.ProcessModel.impl.test;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.List;import java.util.Set;import org.junit.Test;import fr.unice.spinefm.ActionModel.UserActionModel.UserActionModelFactory;import fr.unice.spinefm.ActionModel.UserActionModel.UserCreateContext;import fr.unice.spinefm.ActionModel.UserActionModel.UserPropagate;import fr.unice.spinefm.ActionModel.UserActionModel.UserSelect;import fr.unice.spinefm.ActionModel.UserActionModel.UserValidConfiguration;import fr.unice.spinefm.ActionModel.UserActionModel.impl.test.InitSimpleModel;import fr.unice.spinefm.ConfigurationModel.CompositeConfiguration;import fr.unice.spinefm.ConfigurationModel.Configuration;import fr.unice.spinefm.ConfigurationModel.exceptions.InvalidAssociationException;import fr.unice.spinefm.FMModel.Feature;import fr.unice.spinefm.MSPLModel.DEAssociation;import fr.unice.spinefm.MSPLModel.DomainElement;import fr.unice.spinefm.ProcessModel.ConfigurationProcessStep;import fr.unice.spinefm.ProcessModel.Context;import fr.unice.spinefm.RFModel.ConfigurationState;import fr.unice.spinefm.exceptions.ElementNotFoundException;import fr.unice.spinefm.exceptions.FatalSpineFMException;import fr.unice.spinefm.exceptions.IllegalCallException;import fr.unice.spinefm.fmengine.FMSpineFMAdapter;import fr.unice.spinefm.fmengine.exceptions.FMEngineException;public class TestCheckCompatibleConfiguration extends InitSimpleModel {	@Test	public void testCheckCompatibleConfigurationsBetweenZoneAndRenderer() throws ElementNotFoundException, FatalSpineFMException, FMEngineException, InvalidAssociationException, IllegalCallException {		this.initModel();				DomainElement deRenderer = cm.getMspl().getDomainElementByName("renderer");		DomainElement deZone = cm.getMspl().getDomainElementByName("zone");				List<DEAssociation> result = cm.getMspl().getValidAssociationsForDEs(deRenderer, deZone);		assertEquals(1, result.size());		DEAssociation assoRendererZone = result.get(0);				result = cm.getMspl().getValidAssociationsForDEs(deZone, deRenderer);		assertEquals(1, result.size());		DEAssociation assoZoneRenderer = result.get(0);				assertEquals(0,cm.getLocalContexts().size());		UserCreateContext ucc = UserActionModelFactory.eINSTANCE.createUserCreateContext();		ucc.initManualAction(cm);		ucc.apply();				Context clZone = (Context)ucc.getResult();				ucc = UserActionModelFactory.eINSTANCE.createUserCreateContext();		ucc.initManualAction(cm);		ucc.apply();				Context clRenderer = (Context)ucc.getResult();				assertEquals(2,cm.getLocalContexts().size());				ConfigurationProcessStep cpsZoneContextRenderer = clRenderer.getCPSOfDE(deZone);		ConfigurationProcessStep cpsRendererContextZone = clZone.getCPSOfDE(deRenderer);				ConfigurationProcessStep cpsZone = clZone.getCPSOfDE(deZone);		ConfigurationProcessStep cpsRenderer = clRenderer.getCPSOfDE(deRenderer);				UserSelect userSelectMainZone = UserActionModelFactory.eINSTANCE.createUserSelect();		userSelectMainZone.initManualAction(cm);		userSelectMainZone.setContextID(clZone.getId());		userSelectMainZone.setDomainElementName("zone");		userSelectMainZone.setFeatureName("MainZone_glc");		userSelectMainZone.apply();				CompositeConfiguration compConf = cm.getGlobalContext().getConfiguration();				assertEquals(0,compConf.getSubConfigurations().size());				UserValidConfiguration userValidConfigZone = UserActionModelFactory.eINSTANCE.createUserValidConfiguration();		userValidConfigZone.initManualAction(cm);		userValidConfigZone.setContextID(clZone.getId());		userValidConfigZone.setDomainElementName("zone");		userValidConfigZone.apply();				assertEquals(1,compConf.getSubConfigurations().size());				Configuration confZone = (Configuration)userValidConfigZone.getResult();				UserSelect userSelectBySix = UserActionModelFactory.eINSTANCE.createUserSelect();		userSelectBySix.initManualAction(cm);		userSelectBySix.setContextID(clRenderer.getId());		userSelectBySix.setDomainElementName("renderer");		userSelectBySix.setFeatureName("By6");		userSelectBySix.apply();				UserValidConfiguration userValidConfigRenderer = UserActionModelFactory.eINSTANCE.createUserValidConfiguration();		userValidConfigRenderer.initManualAction(cm);		userValidConfigRenderer.setContextID(clRenderer.getId());		userValidConfigRenderer.setDomainElementName("renderer");		userValidConfigRenderer.apply();				assertEquals(2,compConf.getSubConfigurations().size());				Configuration confRenderer = (Configuration)userValidConfigRenderer.getResult();				assertTrue(cpsRenderer.isMergeableWithCPS(cpsRendererContextZone));		assertTrue(cpsZone.isMergeableWithCPS(cpsZoneContextRenderer));				List<Configuration> configResult = compConf.getCompatibleConfigurations(confRenderer, assoRendererZone);		assertEquals(1, configResult.size());		assertEquals(confZone, configResult.get(0));				configResult = compConf.getCompatibleConfigurations(confZone, assoZoneRenderer);		assertEquals(1, configResult.size());		assertEquals(confRenderer, configResult.get(0));	}}