package fr.unice.spinefm.ProcessModel.impl.test;import static org.junit.Assert.*;import static org.junit.Assert.assertEquals;import java.util.List;import org.junit.Test;import fr.unice.spinefm.ActionModel.UserActionModel.UserActionModelFactory;import fr.unice.spinefm.ActionModel.UserActionModel.UserCreateContext;import fr.unice.spinefm.ActionModel.UserActionModel.UserLinkConfiguration;import fr.unice.spinefm.ActionModel.UserActionModel.UserPropagate;import fr.unice.spinefm.ActionModel.UserActionModel.UserSelect;import fr.unice.spinefm.ActionModel.UserActionModel.UserValidConfiguration;import fr.unice.spinefm.ActionModel.UserActionModel.impl.test.InitSimpleModel;import fr.unice.spinefm.ConfigurationModel.CompositeConfiguration;import fr.unice.spinefm.ConfigurationModel.Configuration;import fr.unice.spinefm.ConfigurationModel.exceptions.InvalidAssociationException;import fr.unice.spinefm.FMModel.Feature;import fr.unice.spinefm.MSPLModel.DEAssociation;import fr.unice.spinefm.MSPLModel.DomainElement;import fr.unice.spinefm.ProcessModel.ConfigurationProcessStep;import fr.unice.spinefm.ProcessModel.Context;import fr.unice.spinefm.exceptions.ElementNotFoundException;import fr.unice.spinefm.exceptions.FatalSpineFMException;import fr.unice.spinefm.exceptions.IllegalCallException;import fr.unice.spinefm.fmengine.exceptions.FMEngineException;public class TestPropagation  extends InitSimpleModel {	@Test	public void testPropagationZoneLayoutThenRenderer() throws ElementNotFoundException, FatalSpineFMException, InvalidAssociationException, IllegalCallException, FMEngineException {		this.initModel();				DomainElement deRenderer = cm.getMspl().getDomainElementByName("renderer");		DomainElement deZone = cm.getMspl().getDomainElementByName("zone");		DomainElement deLayout = cm.getMspl().getDomainElementByName("layout");				List<DEAssociation> result = cm.getMspl().getValidAssociationsForDEs(deLayout, deZone);		assertEquals(1, result.size());		DEAssociation assoLayoutZone = result.get(0);				CompositeConfiguration compConf = cm.getGlobalContext().getConfiguration();				UserCreateContext ucc = UserActionModelFactory.eINSTANCE.createUserCreateContext();		ucc.initManualAction(cm);		ucc.apply();				Context clZone = (Context)ucc.getResult();				UserSelect userSelectHeaderZone = UserActionModelFactory.eINSTANCE.createUserSelect();		userSelectHeaderZone.initManualAction(cm);		userSelectHeaderZone.setContextID(clZone.getId());		userSelectHeaderZone.setDomainElementName("zone");		userSelectHeaderZone.setFeatureName("HeaderZone_glc");		userSelectHeaderZone.apply();				UserPropagate userPropagate = UserActionModelFactory.eINSTANCE.createUserPropagate();		userPropagate.initManualAction(cm);		userPropagate.setContextID(clZone.getId());		userPropagate.setDomainElementName("zone");		userPropagate.apply();				assertEquals(0,compConf.getSubConfigurations().size());				UserValidConfiguration userValidConfigZone = UserActionModelFactory.eINSTANCE.createUserValidConfiguration();		userValidConfigZone.initManualAction(cm);		userValidConfigZone.setContextID(clZone.getId());		userValidConfigZone.setDomainElementName("zone");		userValidConfigZone.apply();				assertEquals(1,compConf.getSubConfigurations().size());				Configuration confZone = (Configuration)userValidConfigZone.getResult();				UserSelect userSelectLayoutGLC = UserActionModelFactory.eINSTANCE.createUserSelect();		userSelectLayoutGLC.initManualAction(cm);		userSelectLayoutGLC.setContextID(cm.getGlobalContext().getId());		userSelectLayoutGLC.setDomainElementName("layout");		userSelectLayoutGLC.setFeatureName("LayoutAcademic");		userSelectLayoutGLC.apply();				userPropagate = UserActionModelFactory.eINSTANCE.createUserPropagate();		userPropagate.initManualAction(cm);		userPropagate.setContextID(cm.getGlobalContext().getId());		userPropagate.setDomainElementName("layout");		userPropagate.apply();				UserValidConfiguration userValidConfigLayout = UserActionModelFactory.eINSTANCE.createUserValidConfiguration();		userValidConfigLayout.initManualAction(cm);		userValidConfigLayout.setContextID(cm.getGlobalContext().getId());		userValidConfigLayout.setDomainElementName("layout");		userValidConfigLayout.apply();				assertEquals(2,compConf.getSubConfigurations().size());				Configuration confLayout = (Configuration)userValidConfigLayout.getResult();				List<Configuration> compatibleConf = compConf.getCompatibleConfigurations(confLayout, assoLayoutZone);		assertEquals(1,compatibleConf.size());				ConfigurationProcessStep cpsRenderer = cm.getGlobalContext().getCPSOfDE(deRenderer);		Feature fmText = deRenderer.getRefers_on().getFeatureFromName("Text");		assertFalse(cpsRenderer.getState().getDeselectedFeatures().contains(fmText));				ConfigurationProcessStep cpsZone = cm.getGlobalContext().getCPSOfDE(deZone);		Feature fmFull = deZone.getRefers_on().getFeatureFromName("Full");		assertFalse(cpsZone.getState().getDeselectedFeatures().contains(fmFull));				UserLinkConfiguration userLink = UserActionModelFactory.eINSTANCE.createUserLinkConfiguration();		userLink.initManualAction(cm);		userLink.setConfSourceName(confLayout.getId());		userLink.setConfTargetName(confZone.getId());				userLink.setAssoName(assoLayoutZone.getId());		userLink.apply();				assertEquals(1,compConf.getLinks().size());		assertFalse(cpsRenderer.getState().getDeselectedFeatures().contains(fmText));				Feature fmHeaderZone = deZone.getRefers_on().getFeatureFromName("HeaderZone_glc");		assertFalse(cpsZone.getState().getDeselectedFeatures().contains(fmFull));		assertFalse(cpsZone.getState().getSelectedFeatures().contains(fmHeaderZone));				ucc = UserActionModelFactory.eINSTANCE.createUserCreateContext();		ucc.initManualAction(cm);		ucc.apply();				Context clRenderer = (Context)ucc.getResult();		ConfigurationProcessStep cpsZoneCL = clRenderer.getCPSOfDE(deZone);				assertFalse(cpsZoneCL.getState().getDeselectedFeatures().contains(fmFull));		assertFalse(cpsZoneCL.getState().getSelectedFeatures().contains(fmHeaderZone));				UserSelect userSelectRendererFull = UserActionModelFactory.eINSTANCE.createUserSelect();		userSelectRendererFull.initManualAction(cm);		userSelectRendererFull.setContextID(clRenderer.getId());		userSelectRendererFull.setDomainElementName("renderer");		userSelectRendererFull.setFeatureName("Full");		userSelectRendererFull.apply();				userPropagate = UserActionModelFactory.eINSTANCE.createUserPropagate();		userPropagate.initManualAction(cm);		userPropagate.setContextID(clRenderer.getId());		userPropagate.setDomainElementName("renderer");		userPropagate.apply();					}}