package fr.unice.spinefm.ConfigurationModel.impl.test;import static org.junit.Assert.assertEquals;import org.junit.Test;import fr.unice.spinefm.ActionModel.UserActionModel.UserActionModelFactory;import fr.unice.spinefm.ActionModel.UserActionModel.UserCreateContext;import fr.unice.spinefm.ActionModel.UserActionModel.UserSelect;import fr.unice.spinefm.ActionModel.UserActionModel.UserValidConfiguration;import fr.unice.spinefm.ActionModel.UserActionModel.impl.test.InitSimpleModel;import fr.unice.spinefm.ConfigurationModel.CompositeConfiguration;import fr.unice.spinefm.ConfigurationModel.Configuration;import fr.unice.spinefm.MSPLModel.DomainElement;import fr.unice.spinefm.ProcessModel.ConfigurationProcessStep;import fr.unice.spinefm.ProcessModel.Context;import fr.unice.spinefm.exceptions.ElementNotFoundException;import fr.unice.spinefm.exceptions.FatalSpineFMException;import fr.unice.spinefm.fmengine.exceptions.FMEngineException;public class TestCreateConfiguration extends InitSimpleModel {		@Test	public void testCreateConfigurationZone() throws ElementNotFoundException, FatalSpineFMException, FMEngineException {		this.initModel();				DomainElement deZone = cm.getMspl().getDomainElementByName("zone");				assertEquals(0,cm.getLocalContexts().size());		UserCreateContext ucc = UserActionModelFactory.eINSTANCE.createUserCreateContext();		ucc.initManualAction(cm);		ucc.apply();				Context clZone = (Context)ucc.getResult();				assertEquals(1,cm.getLocalContexts().size());				ConfigurationProcessStep cpsZone = clZone.getCPSOfDE(deZone);				UserSelect userSelectMainZone = UserActionModelFactory.eINSTANCE.createUserSelect();		userSelectMainZone.initManualAction(cm);		userSelectMainZone.setContextID(clZone.getId());		userSelectMainZone.setDomainElementName("zone");		userSelectMainZone.setFeatureName("MainZone_glc");		userSelectMainZone.apply();				CompositeConfiguration compConf = cm.getGlobalContext().getConfiguration();				assertEquals(0,compConf.getSubConfigurations().size());				UserValidConfiguration userValidConfigZone = UserActionModelFactory.eINSTANCE.createUserValidConfiguration();		userValidConfigZone.initManualAction(cm);		userValidConfigZone.setContextID(clZone.getId());		userValidConfigZone.setDomainElementName("zone");		userValidConfigZone.apply();				assertEquals(1,compConf.getSubConfigurations().size());				Configuration conf = compConf.getSubConfigurations().get(0);		assertEquals(deZone, conf.getDomainElement());		assertEquals(conf, cpsZone.getConfiguration());	}}