package fr.unice.spinefm.ActionModel.UserActionModel.impl;import org.apache.log4j.Logger;import fr.unice.spinefm.ActionModel.ActionMode;import fr.unice.spinefm.ActionModel.SystemActionModel.ActionCreateContext;import fr.unice.spinefm.ActionModel.SystemActionModel.ActionOnFM;import fr.unice.spinefm.ActionModel.SystemActionModel.SystemActionModelFactory;import fr.unice.spinefm.ActionModel.UserActionModel.UserAction;import fr.unice.spinefm.ActionModel.UserActionModel.UserActionModelFactory;import fr.unice.spinefm.ActionModel.UserActionModel.UserCloneContext;import fr.unice.spinefm.ProcessModel.ConfigurationProcessStep;import fr.unice.spinefm.ProcessModel.Context;import fr.unice.spinefm.ProcessModel.exceptions.CPSNotFoundException;import fr.unice.spinefm.exceptions.ElementNotFoundException;import fr.unice.spinefm.exceptions.FatalSpineFMException;import fr.unice.spinefm.fmengine.exceptions.FMEngineException;public class UserCloneContextImplDelegate extends UserCloneContextImpl {	protected static Logger log = Logger.getLogger(UserCloneContextImplDelegate.class);		@Override	public void apply() throws ElementNotFoundException, FatalSpineFMException {		log.info("\n\n\t\t Apply user action CloneContext "+this.getContextID()+"\n\n");		Context origineContext = this.getContextManager().getContextFromId(this.getContextID());		ActionCreateContext acc = SystemActionModelFactory.eINSTANCE.createActionCreateContext();		acc.setContextManager(this.getContextManager());		acc.setStep(this.getStep());		acc.setType(ActionMode.AUTOMATIC);		try {			acc.apply();		} catch (FMEngineException e1) {			throw new FatalSpineFMException(e1.getMessage(),this.getContextManager().getPast(),this.getStep());		}		Context c = acc.getContext();				for (ConfigurationProcessStep cps : origineContext.getCPS()) {			try {				this.cloneCPS(cps, c);			} catch (FMEngineException e) {				// TODO Auto-generated catch block				e.printStackTrace();				throw new FatalSpineFMException(e.getMessage(),this.getContextManager().getPast(),this.getStep());			}		}		this.setResult(c);	}		private void cloneCPS(ConfigurationProcessStep cpsSource, Context contextTarget) throws FMEngineException, ElementNotFoundException {		ConfigurationProcessStep cpsTarget = contextTarget.getCPSOfDE(cpsSource.getDomainElement());				for (ActionOnFM aof : cpsSource.getActionsDone()) {			if (!cpsTarget.alreadyHaveAction(aof)) {				ActionOnFM aofNew = aof.cloneAction();				aofNew.setCps(cpsTarget);				aofNew.setFma(this.getContextManager().getFma());				aofNew.setStep(this.getStep());				aofNew.setType(ActionMode.AUTOMATIC);				aofNew.setFm(cpsTarget.getDomainElement().getRefers_on());				aofNew.apply();			}		}	}		@Override	public String getDescription() {		return "Clone context";	}		@Override	public UserAction cloneActionWithStringAttributes() {		UserCloneContext result = UserActionModelFactory.eINSTANCE.createUserCloneContext();		result.setContextID(this.transformContextNameToSave(this.getContextID()));		return result;	}}