package fr.unice.spinefm.core;import java.util.*;import org.apache.commons.collections15.CollectionUtils;import fr.unice.spinefm.ActionModel.UserActionModel.UserActionModelFactory;import fr.unice.spinefm.ActionModel.UserActionModel.UserInit;import fr.unice.spinefm.ActionModel.UserActionModel.UserPropagate;import fr.unice.spinefm.ActionModel.UserActionModel.UserSelect;import fr.unice.spinefm.ConfigurationModel.Configuration;import fr.unice.spinefm.MSPLModel.DomainElement;import fr.unice.spinefm.ProcessModel.ConfigurationProcessStep;import fr.unice.spinefm.ProcessModel.Context;import fr.unice.spinefm.ProcessModel.ContextManager;import fr.unice.spinefm.ProcessModel.exceptions.CPSNotFoundException;import fr.unice.spinefm.RFModel.ConfigurationState;import fr.unice.spinefm.exceptions.ElementNotFoundException;import fr.unice.spinefm.exceptions.FatalSpineFMException;import fr.unice.spinefm.fmengine.exceptions.FMEngineException;public class TestRealisability {		private ContextManager cm;		// Fonction mock d'intialisation d'un context manager (pour fonctionner on devrait indiquer le chemin du modèle)	public void initAndGiveGlobalContext() throws ElementNotFoundException, FatalSpineFMException {		UserInit ia = UserActionModelFactory.eINSTANCE.createUserInit();		ia.apply();		this.cm = ia.getContextManager();	}		// Fonction mock pour récupérer toutes les configurations à partir du FM associé à un CPS	public Set<Set<String>> getConfigurationsFromCPS(ConfigurationProcessStep cps) {		try {			return this.cm.getFma().getSFI().getAvailableConfigurations(cps.getConfName());		} catch (FMEngineException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return null;		}	}		// Fonction mock pour sélectionner toutes les features d'une configuration spécifique	public void selectConfigInCPS(ConfigurationProcessStep cps, Set<String> config) {		for (String s : config) {			UserSelect select = UserActionModelFactory.eINSTANCE.createUserSelect();			select.setDomainElementName(cps.getDomainElement().getId());			select.setFeatureName(s);			select.initManualAction(cm);			try {				select.apply();			} catch (ElementNotFoundException e) {				// TODO Auto-generated catch block				e.printStackTrace();			} catch (FatalSpineFMException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}	}		// Fonction mock permettant de récupérer la liste des composantes biconnexes dans lesquelles le concept de est inclus	public List<List<DomainElement>> getBiConnectedComponents(DomainElement de) {		return null;	}		public Map<DomainElement, Set<ConfigurationProcessStep>> initMapConcept(Set<ConfigurationProcessStep> allConfigs) {		Map<DomainElement, Set<ConfigurationProcessStep>> mapResult = new HashMap<DomainElement, Set<ConfigurationProcessStep>>();				for (ConfigurationProcessStep cps : allConfigs) {			if (mapResult.containsKey(cps.getDomainElement())) {				mapResult.get(cps.getDomainElement()).add(cps);			} else {				Set<ConfigurationProcessStep> newSet = new HashSet<ConfigurationProcessStep>();				newSet.add(cps);				mapResult.put(cps.getDomainElement(), newSet);			}		}				return mapResult;	}		public DomainElement getConceptMinimumConfig(Map<DomainElement, Set<ConfigurationProcessStep>> mapConfig) {		int i = Integer.MAX_VALUE;		DomainElement result = null;		for (DomainElement de : mapConfig.keySet()) {			if (mapConfig.get(de).size() < i) {				i = mapConfig.get(de).size();				result = de;			}		}		return result;	}		public Set<Set<String>> testRealisability(Set<ConfigurationProcessStep> allConfigs) {		Set<Set<String>> result = new HashSet<Set<String>>();		Map<DomainElement, Set<ConfigurationProcessStep>> mapConfigPerConcept = this.initMapConcept(allConfigs);		do {			DomainElement concept = this.getConceptMinimumConfig(mapConfigPerConcept);			Set<ConfigurationProcessStep> listConfig = mapConfigPerConcept.get(concept);			ConfigurationProcessStep config = listConfig.iterator().next();			listConfig.remove(config);			List<List<DomainElement>> listComposantes = this.getBiConnectedComponents(concept);		} while (!allConfigs.isEmpty());				return null;	}	}